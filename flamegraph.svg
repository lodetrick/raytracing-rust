<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="22170"><g><title>libsystem_c.dylib`clock_gettime_nsec_np (11 samples, 0.05%)</title><rect x="0.0677%" y="197" width="0.0496%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="11"/><text x="0.3177%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (18 samples, 0.08%)</title><rect x="0.1173%" y="197" width="0.0812%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="18"/><text x="0.3673%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (36 samples, 0.16%)</title><rect x="0.0451%" y="213" width="0.1624%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="36"/><text x="0.2951%" y="223.50"></text></g><g><title>graphics`std::sys::pal::unix::time::Timespec::now (40 samples, 0.18%)</title><rect x="0.0316%" y="229" width="0.1804%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="40"/><text x="0.2816%" y="239.50"></text></g><g><title>graphics`indicatif::progress_bar::ProgressBar::inc (43 samples, 0.19%)</title><rect x="0.0226%" y="245" width="0.1940%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="43"/><text x="0.2726%" y="255.50"></text></g><g><title>graphics`indicatif::draw_target::Drawable::draw (3 samples, 0.01%)</title><rect x="0.2165%" y="197" width="0.0135%" height="15" fill="rgb(232,128,0)" fg:x="48" fg:w="3"/><text x="0.4665%" y="207.50"></text></g><g><title>libsystem_c.dylib`isatty (3 samples, 0.01%)</title><rect x="0.2346%" y="149" width="0.0135%" height="15" fill="rgb(207,160,47)" fg:x="52" fg:w="3"/><text x="0.4846%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (3 samples, 0.01%)</title><rect x="0.2346%" y="133" width="0.0135%" height="15" fill="rgb(228,23,34)" fg:x="52" fg:w="3"/><text x="0.4846%" y="143.50"></text></g><g><title>graphics`indicatif::draw_target::ProgressDrawTarget::width (4 samples, 0.02%)</title><rect x="0.2346%" y="181" width="0.0180%" height="15" fill="rgb(218,30,26)" fg:x="52" fg:w="4"/><text x="0.4846%" y="191.50"></text></g><g><title>graphics`console::unix_term::terminal_size (4 samples, 0.02%)</title><rect x="0.2346%" y="165" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="52" fg:w="4"/><text x="0.4846%" y="175.50"></text></g><g><title>graphics`indicatif::draw_target::ProgressDrawTarget::width (6 samples, 0.03%)</title><rect x="0.2346%" y="197" width="0.0271%" height="15" fill="rgb(250,228,42)" fg:x="52" fg:w="6"/><text x="0.4846%" y="207.50"></text></g><g><title>graphics`alloc::fmt::format::format_inner (5 samples, 0.02%)</title><rect x="0.2706%" y="165" width="0.0226%" height="15" fill="rgb(240,193,28)" fg:x="60" fg:w="5"/><text x="0.5206%" y="175.50"></text></g><g><title>graphics`core::fmt::write (5 samples, 0.02%)</title><rect x="0.2706%" y="149" width="0.0226%" height="15" fill="rgb(216,20,37)" fg:x="60" fg:w="5"/><text x="0.5206%" y="159.50"></text></g><g><title>graphics`&lt;indicatif::style::BarDisplay as core::fmt::Display&gt;::fmt (4 samples, 0.02%)</title><rect x="0.2751%" y="133" width="0.0180%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="4"/><text x="0.5251%" y="143.50"></text></g><g><title>graphics`indicatif::style::ProgressStyle::format_state (10 samples, 0.05%)</title><rect x="0.2616%" y="197" width="0.0451%" height="15" fill="rgb(217,207,13)" fg:x="58" fg:w="10"/><text x="0.5116%" y="207.50"></text></g><g><title>graphics`indicatif::style::ProgressStyle::push_line (8 samples, 0.04%)</title><rect x="0.2706%" y="181" width="0.0361%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="8"/><text x="0.5206%" y="191.50"></text></g><g><title>graphics`indicatif::progress_bar::ProgressBar::tick_inner (21 samples, 0.09%)</title><rect x="0.2165%" y="245" width="0.0947%" height="15" fill="rgb(225,20,46)" fg:x="48" fg:w="21"/><text x="0.4665%" y="255.50"></text></g><g><title>graphics`indicatif::state::BarState::update_estimate_and_draw (21 samples, 0.09%)</title><rect x="0.2165%" y="229" width="0.0947%" height="15" fill="rgb(210,31,41)" fg:x="48" fg:w="21"/><text x="0.4665%" y="239.50"></text></g><g><title>graphics`indicatif::state::BarState::draw (21 samples, 0.09%)</title><rect x="0.2165%" y="213" width="0.0947%" height="15" fill="rgb(221,200,47)" fg:x="48" fg:w="21"/><text x="0.4665%" y="223.50"></text></g><g><title>graphics`std::thread::park (146 samples, 0.66%)</title><rect x="0.3654%" y="213" width="0.6585%" height="15" fill="rgb(226,26,5)" fg:x="81" fg:w="146"/><text x="0.6154%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (144 samples, 0.65%)</title><rect x="0.3744%" y="197" width="0.6495%" height="15" fill="rgb(249,33,26)" fg:x="83" fg:w="144"/><text x="0.6244%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (143 samples, 0.65%)</title><rect x="0.3789%" y="181" width="0.6450%" height="15" fill="rgb(235,183,28)" fg:x="84" fg:w="143"/><text x="0.6289%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (7 samples, 0.03%)</title><rect x="1.0329%" y="197" width="0.0316%" height="15" fill="rgb(221,5,38)" fg:x="229" fg:w="7"/><text x="1.2829%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (8 samples, 0.04%)</title><rect x="1.0329%" y="213" width="0.0361%" height="15" fill="rgb(247,18,42)" fg:x="229" fg:w="8"/><text x="1.2829%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (5 samples, 0.02%)</title><rect x="1.0690%" y="213" width="0.0226%" height="15" fill="rgb(241,131,45)" fg:x="237" fg:w="5"/><text x="1.3190%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (5 samples, 0.02%)</title><rect x="1.0690%" y="197" width="0.0226%" height="15" fill="rgb(249,31,29)" fg:x="237" fg:w="5"/><text x="1.3190%" y="207.50"></text></g><g><title>graphics`std::sync::mpmc::list::Channel&lt;T&gt;::recv::_{{closure}} (168 samples, 0.76%)</title><rect x="0.3473%" y="229" width="0.7578%" height="15" fill="rgb(225,111,53)" fg:x="77" fg:w="168"/><text x="0.5973%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="1.1051%" y="229" width="0.0135%" height="15" fill="rgb(238,160,17)" fg:x="245" fg:w="3"/><text x="1.3551%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="1.1051%" y="213" width="0.0135%" height="15" fill="rgb(214,148,48)" fg:x="245" fg:w="3"/><text x="1.3551%" y="223.50"></text></g><g><title>graphics`std::sync::mpmc::list::Channel&lt;T&gt;::recv (180 samples, 0.81%)</title><rect x="0.3112%" y="245" width="0.8119%" height="15" fill="rgb(232,36,49)" fg:x="69" fg:w="180"/><text x="0.5612%" y="255.50"></text></g><g><title>graphics`graphics::camera::Camera::render_parallel (249 samples, 1.12%)</title><rect x="0.0045%" y="261" width="1.1231%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="249"/><text x="0.2545%" y="271.50"></text></g><g><title>dyld`start (252 samples, 1.14%)</title><rect x="0.0000%" y="357" width="1.1367%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="252"/><text x="0.2500%" y="367.50"></text></g><g><title>graphics`main (252 samples, 1.14%)</title><rect x="0.0000%" y="341" width="1.1367%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="252"/><text x="0.2500%" y="351.50"></text></g><g><title>graphics`std::rt::lang_start_internal (252 samples, 1.14%)</title><rect x="0.0000%" y="325" width="1.1367%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="252"/><text x="0.2500%" y="335.50"></text></g><g><title>graphics`std::rt::lang_start::_{{closure}} (251 samples, 1.13%)</title><rect x="0.0045%" y="309" width="1.1322%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="251"/><text x="0.2545%" y="319.50"></text></g><g><title>graphics`std::sys_common::backtrace::__rust_begin_short_backtrace (251 samples, 1.13%)</title><rect x="0.0045%" y="293" width="1.1322%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="251"/><text x="0.2545%" y="303.50"></text></g><g><title>graphics`graphics::main (251 samples, 1.13%)</title><rect x="0.0045%" y="277" width="1.1322%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="251"/><text x="0.2545%" y="287.50"></text></g><g><title>graphics`graphics::camera::Camera::get_ray (66 samples, 0.30%)</title><rect x="1.1367%" y="293" width="0.2977%" height="15" fill="rgb(245,192,40)" fg:x="252" fg:w="66"/><text x="1.3867%" y="303.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (9 samples, 0.04%)</title><rect x="1.4344%" y="293" width="0.0406%" height="15" fill="rgb(238,167,29)" fg:x="318" fg:w="9"/><text x="1.6844%" y="303.50"></text></g><g><title>graphics`&lt;graphics::materials::Lambertian as graphics::materials::Material&gt;::scatter (57 samples, 0.26%)</title><rect x="1.5201%" y="277" width="0.2571%" height="15" fill="rgb(232,182,51)" fg:x="337" fg:w="57"/><text x="1.7701%" y="287.50"></text></g><g><title>graphics`&lt;graphics::materials::Metal as graphics::materials::Material&gt;::scatter (31 samples, 0.14%)</title><rect x="1.7772%" y="277" width="0.1398%" height="15" fill="rgb(231,60,39)" fg:x="394" fg:w="31"/><text x="2.0272%" y="287.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (992 samples, 4.47%)</title><rect x="1.9170%" y="277" width="4.4745%" height="15" fill="rgb(208,69,12)" fg:x="425" fg:w="992"/><text x="2.1670%" y="287.50">graph..</text></g><g><title>graphics`&lt;graphics::materials::Lambertian as graphics::materials::Material&gt;::scatter (22 samples, 0.10%)</title><rect x="16.5223%" y="261" width="0.0992%" height="15" fill="rgb(235,93,37)" fg:x="3663" fg:w="22"/><text x="16.7723%" y="271.50"></text></g><g><title>graphics`&lt;graphics::materials::Metal as graphics::materials::Material&gt;::scatter (7 samples, 0.03%)</title><rect x="16.6216%" y="261" width="0.0316%" height="15" fill="rgb(213,116,39)" fg:x="3685" fg:w="7"/><text x="16.8716%" y="271.50"></text></g><g><title>graphics`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.03%)</title><rect x="43.0131%" y="245" width="0.0271%" height="15" fill="rgb(222,207,29)" fg:x="9536" fg:w="6"/><text x="43.2631%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.01%)</title><rect x="43.0492%" y="245" width="0.0135%" height="15" fill="rgb(206,96,30)" fg:x="9544" fg:w="3"/><text x="43.2992%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (61 samples, 0.28%)</title><rect x="43.0627%" y="245" width="0.2751%" height="15" fill="rgb(218,138,4)" fg:x="9547" fg:w="61"/><text x="43.3127%" y="255.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (5,927 samples, 26.73%)</title><rect x="16.6531%" y="261" width="26.7343%" height="15" fill="rgb(250,191,14)" fg:x="3692" fg:w="5927"/><text x="16.9031%" y="271.50">graphics`&lt;graphics::raycasting::Sphere as g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.04%)</title><rect x="43.3469%" y="245" width="0.0406%" height="15" fill="rgb(239,60,40)" fg:x="9610" fg:w="9"/><text x="43.5969%" y="255.50"></text></g><g><title>graphics`DYLD-STUB$$free (4 samples, 0.02%)</title><rect x="43.3875%" y="261" width="0.0180%" height="15" fill="rgb(206,27,48)" fg:x="9619" fg:w="4"/><text x="43.6375%" y="271.50"></text></g><g><title>graphics`__rdl_alloc (3 samples, 0.01%)</title><rect x="43.4145%" y="261" width="0.0135%" height="15" fill="rgb(225,35,8)" fg:x="9625" fg:w="3"/><text x="43.6645%" y="271.50"></text></g><g><title>graphics`&lt;graphics::materials::Lambertian as graphics::materials::Material&gt;::scatter (21 samples, 0.09%)</title><rect x="50.5774%" y="245" width="0.0947%" height="15" fill="rgb(250,213,24)" fg:x="11213" fg:w="21"/><text x="50.8274%" y="255.50"></text></g><g><title>graphics`&lt;graphics::materials::Metal as graphics::materials::Material&gt;::scatter (5 samples, 0.02%)</title><rect x="50.6721%" y="245" width="0.0226%" height="15" fill="rgb(247,123,22)" fg:x="11234" fg:w="5"/><text x="50.9221%" y="255.50"></text></g><g><title>graphics`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.02%)</title><rect x="70.8931%" y="229" width="0.0226%" height="15" fill="rgb(231,138,38)" fg:x="15717" fg:w="5"/><text x="71.1431%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.08%)</title><rect x="70.9247%" y="229" width="0.0812%" height="15" fill="rgb(231,145,46)" fg:x="15724" fg:w="18"/><text x="71.1747%" y="239.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (4,507 samples, 20.33%)</title><rect x="50.6946%" y="245" width="20.3293%" height="15" fill="rgb(251,118,11)" fg:x="11239" fg:w="4507"/><text x="50.9446%" y="255.50">graphics`&lt;graphics::raycasting::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="71.0104%" y="229" width="0.0135%" height="15" fill="rgb(217,147,25)" fg:x="15743" fg:w="3"/><text x="71.2604%" y="239.50"></text></g><g><title>graphics`&lt;graphics::materials::Lambertian as graphics::materials::Material&gt;::scatter (7 samples, 0.03%)</title><rect x="74.0911%" y="229" width="0.0316%" height="15" fill="rgb(247,81,37)" fg:x="16426" fg:w="7"/><text x="74.3411%" y="239.50"></text></g><g><title>graphics`&lt;graphics::materials::Metal as graphics::materials::Material&gt;::scatter (4 samples, 0.02%)</title><rect x="74.1227%" y="229" width="0.0180%" height="15" fill="rgb(209,12,38)" fg:x="16433" fg:w="4"/><text x="74.3727%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.05%)</title><rect x="82.5395%" y="213" width="0.0541%" height="15" fill="rgb(227,1,9)" fg:x="18299" fg:w="12"/><text x="82.7895%" y="223.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (1,875 samples, 8.46%)</title><rect x="74.1407%" y="229" width="8.4574%" height="15" fill="rgb(248,47,43)" fg:x="16437" fg:w="1875"/><text x="74.3907%" y="239.50">graphics`&lt;gr..</text></g><g><title>graphics`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.02%)</title><rect x="82.6071%" y="229" width="0.0180%" height="15" fill="rgb(221,10,30)" fg:x="18314" fg:w="4"/><text x="82.8571%" y="239.50"></text></g><g><title>graphics`&lt;graphics::materials::Lambertian as graphics::materials::Material&gt;::scatter (6 samples, 0.03%)</title><rect x="84.2941%" y="213" width="0.0271%" height="15" fill="rgb(210,229,1)" fg:x="18688" fg:w="6"/><text x="84.5441%" y="223.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (997 samples, 4.50%)</title><rect x="84.3212%" y="213" width="4.4971%" height="15" fill="rgb(222,148,37)" fg:x="18694" fg:w="997"/><text x="84.5712%" y="223.50">graph..</text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (532 samples, 2.40%)</title><rect x="89.6482%" y="197" width="2.3996%" height="15" fill="rgb(234,67,33)" fg:x="19875" fg:w="532"/><text x="89.8982%" y="207.50">gr..</text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (326 samples, 1.47%)</title><rect x="92.6432%" y="181" width="1.4705%" height="15" fill="rgb(247,98,35)" fg:x="20539" fg:w="326"/><text x="92.8932%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="94.1001%" y="165" width="0.0135%" height="15" fill="rgb(247,138,52)" fg:x="20862" fg:w="3"/><text x="94.3501%" y="175.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (200 samples, 0.90%)</title><rect x="94.5061%" y="165" width="0.9021%" height="15" fill="rgb(213,79,30)" fg:x="20952" fg:w="200"/><text x="94.7561%" y="175.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (134 samples, 0.60%)</title><rect x="95.6067%" y="149" width="0.6044%" height="15" fill="rgb(246,177,23)" fg:x="21196" fg:w="134"/><text x="95.8567%" y="159.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (94 samples, 0.42%)</title><rect x="96.3915%" y="133" width="0.4240%" height="15" fill="rgb(230,62,27)" fg:x="21370" fg:w="94"/><text x="96.6415%" y="143.50"></text></g><g><title>graphics`&lt;graphics::raycasting::Sphere as graphics::raycasting::Hittable&gt;::hit (65 samples, 0.29%)</title><rect x="96.9373%" y="117" width="0.2932%" height="15" fill="rgb(216,154,8)" fg:x="21491" fg:w="65"/><text x="97.1873%" y="127.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (406 samples, 1.83%)</title><rect x="95.4082%" y="165" width="1.8313%" height="15" fill="rgb(244,35,45)" fg:x="21152" fg:w="406"/><text x="95.6582%" y="175.50">g..</text></g><g><title>graphics`graphics::camera::Camera::ray_color (228 samples, 1.03%)</title><rect x="96.2111%" y="149" width="1.0284%" height="15" fill="rgb(251,115,12)" fg:x="21330" fg:w="228"/><text x="96.4611%" y="159.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (94 samples, 0.42%)</title><rect x="96.8155%" y="133" width="0.4240%" height="15" fill="rgb(240,54,50)" fg:x="21464" fg:w="94"/><text x="97.0655%" y="143.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (697 samples, 3.14%)</title><rect x="94.1137%" y="181" width="3.1439%" height="15" fill="rgb(233,84,52)" fg:x="20865" fg:w="697"/><text x="94.3637%" y="191.50">gra..</text></g><g><title>graphics`graphics::camera::Camera::ray_color (1,156 samples, 5.21%)</title><rect x="92.0523%" y="197" width="5.2143%" height="15" fill="rgb(207,117,47)" fg:x="20408" fg:w="1156"/><text x="92.3023%" y="207.50">graphi..</text></g><g><title>graphics`graphics::camera::Camera::ray_color (1,876 samples, 8.46%)</title><rect x="88.8182%" y="213" width="8.4619%" height="15" fill="rgb(249,43,39)" fg:x="19691" fg:w="1876"/><text x="89.0682%" y="223.50">graphics`gra..</text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.03%)</title><rect x="97.2801%" y="213" width="0.0271%" height="15" fill="rgb(209,38,44)" fg:x="21567" fg:w="6"/><text x="97.5301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="97.3207%" y="213" width="0.0180%" height="15" fill="rgb(236,212,23)" fg:x="21576" fg:w="4"/><text x="97.5707%" y="223.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (3,263 samples, 14.72%)</title><rect x="82.6252%" y="229" width="14.7181%" height="15" fill="rgb(242,79,21)" fg:x="18318" fg:w="3263"/><text x="82.8752%" y="239.50">graphics`graphics::cam..</text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.02%)</title><rect x="97.3433%" y="229" width="0.0226%" height="15" fill="rgb(211,96,35)" fg:x="21581" fg:w="5"/><text x="97.5933%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.03%)</title><rect x="97.3748%" y="229" width="0.0316%" height="15" fill="rgb(253,215,40)" fg:x="21588" fg:w="7"/><text x="97.6248%" y="239.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (5,850 samples, 26.39%)</title><rect x="71.0374%" y="245" width="26.3870%" height="15" fill="rgb(211,81,21)" fg:x="15749" fg:w="5850"/><text x="71.2874%" y="255.50">graphics`graphics::camera::Camera::ray_col..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="97.4064%" y="229" width="0.0180%" height="15" fill="rgb(208,190,38)" fg:x="21595" fg:w="4"/><text x="97.6564%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (8 samples, 0.04%)</title><rect x="97.4290%" y="245" width="0.0361%" height="15" fill="rgb(235,213,38)" fg:x="21600" fg:w="8"/><text x="97.6790%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="97.4650%" y="245" width="0.0180%" height="15" fill="rgb(237,122,38)" fg:x="21608" fg:w="4"/><text x="97.7150%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.05%)</title><rect x="97.4831%" y="245" width="0.0541%" height="15" fill="rgb(244,218,35)" fg:x="21612" fg:w="12"/><text x="97.7331%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.05%)</title><rect x="97.5372%" y="245" width="0.0496%" height="15" fill="rgb(240,68,47)" fg:x="21624" fg:w="11"/><text x="97.7872%" y="255.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (12,010 samples, 54.17%)</title><rect x="43.4326%" y="261" width="54.1723%" height="15" fill="rgb(210,16,53)" fg:x="9629" fg:w="12010"/><text x="43.6826%" y="271.50">graphics`graphics::camera::Camera::ray_color</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.02%)</title><rect x="97.5868%" y="245" width="0.0180%" height="15" fill="rgb(235,124,12)" fg:x="21635" fg:w="4"/><text x="97.8368%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (22 samples, 0.10%)</title><rect x="97.6049%" y="261" width="0.0992%" height="15" fill="rgb(224,169,11)" fg:x="21639" fg:w="22"/><text x="97.8549%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.04%)</title><rect x="97.7041%" y="261" width="0.0361%" height="15" fill="rgb(250,166,2)" fg:x="21661" fg:w="8"/><text x="97.9541%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 0.15%)</title><rect x="97.7402%" y="261" width="0.1488%" height="15" fill="rgb(242,216,29)" fg:x="21669" fg:w="33"/><text x="97.9902%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.08%)</title><rect x="97.9026%" y="261" width="0.0812%" height="15" fill="rgb(230,116,27)" fg:x="21705" fg:w="18"/><text x="98.1526%" y="271.50"></text></g><g><title>graphics`graphics::camera::Camera::ray_color (20,306 samples, 91.59%)</title><rect x="6.4005%" y="277" width="91.5922%" height="15" fill="rgb(228,99,48)" fg:x="1419" fg:w="20306"/><text x="6.6505%" y="287.50">graphics`graphics::camera::Camera::ray_color</text></g><g><title>graphics`indicatif::progress_bar::ProgressBar::inc (35 samples, 0.16%)</title><rect x="97.9928%" y="277" width="0.1579%" height="15" fill="rgb(253,11,6)" fg:x="21725" fg:w="35"/><text x="98.2428%" y="287.50"></text></g><g><title>graphics`std::sys::pal::unix::time::Timespec::now (33 samples, 0.15%)</title><rect x="98.0018%" y="261" width="0.1488%" height="15" fill="rgb(247,143,39)" fg:x="21727" fg:w="33"/><text x="98.2518%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (33 samples, 0.15%)</title><rect x="98.0018%" y="245" width="0.1488%" height="15" fill="rgb(236,97,10)" fg:x="21727" fg:w="33"/><text x="98.2518%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (32 samples, 0.14%)</title><rect x="98.0063%" y="229" width="0.1443%" height="15" fill="rgb(233,208,19)" fg:x="21728" fg:w="32"/><text x="98.2563%" y="239.50"></text></g><g><title>graphics`console::term::Term::flush (4 samples, 0.02%)</title><rect x="98.1777%" y="181" width="0.0180%" height="15" fill="rgb(216,164,2)" fg:x="21766" fg:w="4"/><text x="98.4277%" y="191.50"></text></g><g><title>graphics`console::term::Term::write_through (4 samples, 0.02%)</title><rect x="98.1777%" y="165" width="0.0180%" height="15" fill="rgb(220,129,5)" fg:x="21766" fg:w="4"/><text x="98.4277%" y="175.50"></text></g><g><title>graphics`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (4 samples, 0.02%)</title><rect x="98.1777%" y="149" width="0.0180%" height="15" fill="rgb(242,17,10)" fg:x="21766" fg:w="4"/><text x="98.4277%" y="159.50"></text></g><g><title>graphics`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (4 samples, 0.02%)</title><rect x="98.1777%" y="133" width="0.0180%" height="15" fill="rgb(242,107,0)" fg:x="21766" fg:w="4"/><text x="98.4277%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (4 samples, 0.02%)</title><rect x="98.1777%" y="117" width="0.0180%" height="15" fill="rgb(251,28,31)" fg:x="21766" fg:w="4"/><text x="98.4277%" y="127.50"></text></g><g><title>graphics`indicatif::draw_target::Drawable::draw (6 samples, 0.03%)</title><rect x="98.1777%" y="197" width="0.0271%" height="15" fill="rgb(233,223,10)" fg:x="21766" fg:w="6"/><text x="98.4277%" y="207.50"></text></g><g><title>libsystem_c.dylib`isatty (14 samples, 0.06%)</title><rect x="98.2048%" y="165" width="0.0631%" height="15" fill="rgb(215,21,27)" fg:x="21772" fg:w="14"/><text x="98.4548%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (14 samples, 0.06%)</title><rect x="98.2048%" y="149" width="0.0631%" height="15" fill="rgb(232,23,21)" fg:x="21772" fg:w="14"/><text x="98.4548%" y="159.50"></text></g><g><title>graphics`indicatif::multi::MultiState::draw (34 samples, 0.15%)</title><rect x="98.1732%" y="213" width="0.1534%" height="15" fill="rgb(244,5,23)" fg:x="21765" fg:w="34"/><text x="98.4232%" y="223.50"></text></g><g><title>graphics`indicatif::draw_target::ProgressDrawTarget::width (27 samples, 0.12%)</title><rect x="98.2048%" y="197" width="0.1218%" height="15" fill="rgb(226,81,46)" fg:x="21772" fg:w="27"/><text x="98.4548%" y="207.50"></text></g><g><title>graphics`console::unix_term::terminal_size (27 samples, 0.12%)</title><rect x="98.2048%" y="181" width="0.1218%" height="15" fill="rgb(247,70,30)" fg:x="21772" fg:w="27"/><text x="98.4548%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (13 samples, 0.06%)</title><rect x="98.2679%" y="165" width="0.0586%" height="15" fill="rgb(212,68,19)" fg:x="21786" fg:w="13"/><text x="98.5179%" y="175.50"></text></g><g><title>graphics`indicatif::draw_target::Drawable::draw (40 samples, 0.18%)</title><rect x="98.1687%" y="229" width="0.1804%" height="15" fill="rgb(240,187,13)" fg:x="21764" fg:w="40"/><text x="98.4187%" y="239.50"></text></g><g><title>graphics`std::sys::sync::rwlock::queue::RwLock::unlock_queue (5 samples, 0.02%)</title><rect x="98.3266%" y="213" width="0.0226%" height="15" fill="rgb(223,113,26)" fg:x="21799" fg:w="5"/><text x="98.5766%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (5 samples, 0.02%)</title><rect x="98.3266%" y="197" width="0.0226%" height="15" fill="rgb(206,192,2)" fg:x="21799" fg:w="5"/><text x="98.5766%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (5 samples, 0.02%)</title><rect x="98.3266%" y="181" width="0.0226%" height="15" fill="rgb(241,108,4)" fg:x="21799" fg:w="5"/><text x="98.5766%" y="191.50"></text></g><g><title>graphics`indicatif::draw_target::ProgressDrawTarget::drawable (4 samples, 0.02%)</title><rect x="98.3491%" y="229" width="0.0180%" height="15" fill="rgb(247,173,49)" fg:x="21804" fg:w="4"/><text x="98.5991%" y="239.50"></text></g><g><title>graphics`std::sys::sync::rwlock::queue::RwLock::lock_contended (4 samples, 0.02%)</title><rect x="98.3491%" y="213" width="0.0180%" height="15" fill="rgb(224,114,35)" fg:x="21804" fg:w="4"/><text x="98.5991%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (3 samples, 0.01%)</title><rect x="98.3536%" y="197" width="0.0135%" height="15" fill="rgb(245,159,27)" fg:x="21805" fg:w="3"/><text x="98.6036%" y="207.50"></text></g><g><title>libsystem_c.dylib`isatty (34 samples, 0.15%)</title><rect x="98.3852%" y="181" width="0.1534%" height="15" fill="rgb(245,172,44)" fg:x="21812" fg:w="34"/><text x="98.6352%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (34 samples, 0.15%)</title><rect x="98.3852%" y="165" width="0.1534%" height="15" fill="rgb(236,23,11)" fg:x="21812" fg:w="34"/><text x="98.6352%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (27 samples, 0.12%)</title><rect x="98.5386%" y="181" width="0.1218%" height="15" fill="rgb(205,117,38)" fg:x="21846" fg:w="27"/><text x="98.7886%" y="191.50"></text></g><g><title>graphics`indicatif::draw_target::ProgressDrawTarget::width (64 samples, 0.29%)</title><rect x="98.3762%" y="213" width="0.2887%" height="15" fill="rgb(237,72,25)" fg:x="21810" fg:w="64"/><text x="98.6262%" y="223.50"></text></g><g><title>graphics`console::unix_term::terminal_size (64 samples, 0.29%)</title><rect x="98.3762%" y="197" width="0.2887%" height="15" fill="rgb(244,70,9)" fg:x="21810" fg:w="64"/><text x="98.6262%" y="207.50"></text></g><g><title>graphics`indicatif::draw_target::ProgressDrawTarget::width (79 samples, 0.36%)</title><rect x="98.3672%" y="229" width="0.3563%" height="15" fill="rgb(217,125,39)" fg:x="21808" fg:w="79"/><text x="98.6172%" y="239.50"></text></g><g><title>graphics`std::sys::sync::rwlock::queue::RwLock::lock_contended (13 samples, 0.06%)</title><rect x="98.6649%" y="213" width="0.0586%" height="15" fill="rgb(235,36,10)" fg:x="21874" fg:w="13"/><text x="98.9149%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (11 samples, 0.05%)</title><rect x="98.6739%" y="197" width="0.0496%" height="15" fill="rgb(251,123,47)" fg:x="21876" fg:w="11"/><text x="98.9239%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (11 samples, 0.05%)</title><rect x="98.6739%" y="181" width="0.0496%" height="15" fill="rgb(221,13,13)" fg:x="21876" fg:w="11"/><text x="98.9239%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="98.7776%" y="69" width="0.0135%" height="15" fill="rgb(238,131,9)" fg:x="21899" fg:w="3"/><text x="99.0276%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="98.7776%" y="53" width="0.0135%" height="15" fill="rgb(211,50,8)" fg:x="21899" fg:w="3"/><text x="99.0276%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="98.7776%" y="37" width="0.0135%" height="15" fill="rgb(245,182,24)" fg:x="21899" fg:w="3"/><text x="99.0276%" y="47.50"></text></g><g><title>graphics`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.02%)</title><rect x="98.7776%" y="149" width="0.0180%" height="15" fill="rgb(242,14,37)" fg:x="21899" fg:w="4"/><text x="99.0276%" y="159.50"></text></g><g><title>graphics`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.02%)</title><rect x="98.7776%" y="133" width="0.0180%" height="15" fill="rgb(246,228,12)" fg:x="21899" fg:w="4"/><text x="99.0276%" y="143.50"></text></g><g><title>graphics`alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="98.7776%" y="117" width="0.0180%" height="15" fill="rgb(213,55,15)" fg:x="21899" fg:w="4"/><text x="99.0276%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.02%)</title><rect x="98.7776%" y="101" width="0.0180%" height="15" fill="rgb(209,9,3)" fg:x="21899" fg:w="4"/><text x="99.0276%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.02%)</title><rect x="98.7776%" y="85" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="21899" fg:w="4"/><text x="99.0276%" y="95.50"></text></g><g><title>graphics`core::fmt::Formatter::write_str (3 samples, 0.01%)</title><rect x="98.7957%" y="149" width="0.0135%" height="15" fill="rgb(209,121,21)" fg:x="21903" fg:w="3"/><text x="99.0457%" y="159.50"></text></g><g><title>graphics`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (15 samples, 0.07%)</title><rect x="98.7686%" y="165" width="0.0677%" height="15" fill="rgb(220,109,13)" fg:x="21897" fg:w="15"/><text x="99.0186%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.03%)</title><rect x="98.8092%" y="149" width="0.0271%" height="15" fill="rgb(232,18,1)" fg:x="21906" fg:w="6"/><text x="99.0592%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.02%)</title><rect x="98.8724%" y="85" width="0.0226%" height="15" fill="rgb(215,41,42)" fg:x="21920" fg:w="5"/><text x="99.1224%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="98.8814%" y="69" width="0.0135%" height="15" fill="rgb(224,123,36)" fg:x="21922" fg:w="3"/><text x="99.1314%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="98.8814%" y="53" width="0.0135%" height="15" fill="rgb(240,125,3)" fg:x="21922" fg:w="3"/><text x="99.1314%" y="63.50"></text></g><g><title>graphics`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (13 samples, 0.06%)</title><rect x="98.8408%" y="149" width="0.0586%" height="15" fill="rgb(205,98,50)" fg:x="21913" fg:w="13"/><text x="99.0908%" y="159.50"></text></g><g><title>graphics`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.05%)</title><rect x="98.8453%" y="133" width="0.0541%" height="15" fill="rgb(205,185,37)" fg:x="21914" fg:w="12"/><text x="99.0953%" y="143.50"></text></g><g><title>graphics`alloc::raw_vec::finish_grow (7 samples, 0.03%)</title><rect x="98.8678%" y="117" width="0.0316%" height="15" fill="rgb(238,207,15)" fg:x="21919" fg:w="7"/><text x="99.1178%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.03%)</title><rect x="98.8724%" y="101" width="0.0271%" height="15" fill="rgb(213,199,42)" fg:x="21920" fg:w="6"/><text x="99.1224%" y="111.50"></text></g><g><title>graphics`alloc::fmt::format::format_inner (36 samples, 0.16%)</title><rect x="98.7641%" y="197" width="0.1624%" height="15" fill="rgb(235,201,11)" fg:x="21896" fg:w="36"/><text x="99.0141%" y="207.50"></text></g><g><title>graphics`core::fmt::write (36 samples, 0.16%)</title><rect x="98.7641%" y="181" width="0.1624%" height="15" fill="rgb(207,46,11)" fg:x="21896" fg:w="36"/><text x="99.0141%" y="191.50"></text></g><g><title>graphics`&lt;indicatif::style::BarDisplay as core::fmt::Display&gt;::fmt (20 samples, 0.09%)</title><rect x="98.8363%" y="165" width="0.0902%" height="15" fill="rgb(241,35,35)" fg:x="21912" fg:w="20"/><text x="99.0863%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="98.9084%" y="149" width="0.0180%" height="15" fill="rgb(243,32,47)" fg:x="21928" fg:w="4"/><text x="99.1584%" y="159.50"></text></g><g><title>graphics`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="98.9265%" y="197" width="0.0135%" height="15" fill="rgb(247,202,23)" fg:x="21932" fg:w="3"/><text x="99.1765%" y="207.50"></text></g><g><title>graphics`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="98.9265%" y="181" width="0.0135%" height="15" fill="rgb(219,102,11)" fg:x="21932" fg:w="3"/><text x="99.1765%" y="191.50"></text></g><g><title>graphics`indicatif::style::ProgressStyle::push_line (44 samples, 0.20%)</title><rect x="98.7551%" y="213" width="0.1985%" height="15" fill="rgb(243,110,44)" fg:x="21894" fg:w="44"/><text x="99.0051%" y="223.50"></text></g><g><title>graphics`indicatif::style::ProgressStyle::format_state (54 samples, 0.24%)</title><rect x="98.7235%" y="229" width="0.2436%" height="15" fill="rgb(222,74,54)" fg:x="21887" fg:w="54"/><text x="98.9735%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="98.9761%" y="229" width="0.0135%" height="15" fill="rgb(216,99,12)" fg:x="21943" fg:w="3"/><text x="99.2261%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="98.9761%" y="213" width="0.0135%" height="15" fill="rgb(226,22,26)" fg:x="21943" fg:w="3"/><text x="99.2261%" y="223.50"></text></g><g><title>graphics`indicatif::state::BarState::draw (187 samples, 0.84%)</title><rect x="98.1597%" y="245" width="0.8435%" height="15" fill="rgb(217,163,10)" fg:x="21762" fg:w="187"/><text x="98.4097%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="98.9896%" y="229" width="0.0135%" height="15" fill="rgb(213,25,53)" fg:x="21946" fg:w="3"/><text x="99.2396%" y="239.50"></text></g><g><title>graphics`indicatif::state::BarState::update_estimate_and_draw (188 samples, 0.85%)</title><rect x="98.1597%" y="261" width="0.8480%" height="15" fill="rgb(252,105,26)" fg:x="21762" fg:w="188"/><text x="98.4097%" y="271.50"></text></g><g><title>graphics`indicatif::progress_bar::ProgressBar::tick_inner (191 samples, 0.86%)</title><rect x="98.1507%" y="277" width="0.8615%" height="15" fill="rgb(220,39,43)" fg:x="21760" fg:w="191"/><text x="98.4007%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (108 samples, 0.49%)</title><rect x="99.0347%" y="261" width="0.4871%" height="15" fill="rgb(229,68,48)" fg:x="21956" fg:w="108"/><text x="99.2847%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (108 samples, 0.49%)</title><rect x="99.0347%" y="245" width="0.4871%" height="15" fill="rgb(252,8,32)" fg:x="21956" fg:w="108"/><text x="99.2847%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (53 samples, 0.24%)</title><rect x="99.5219%" y="245" width="0.2391%" height="15" fill="rgb(223,20,43)" fg:x="22064" fg:w="53"/><text x="99.7719%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (54 samples, 0.24%)</title><rect x="99.5219%" y="261" width="0.2436%" height="15" fill="rgb(229,81,49)" fg:x="22064" fg:w="54"/><text x="99.7719%" y="271.50"></text></g><g><title>graphics`std::sync::mpmc::list::Channel&lt;T&gt;::send (187 samples, 0.84%)</title><rect x="99.0122%" y="277" width="0.8435%" height="15" fill="rgb(236,28,36)" fg:x="21951" fg:w="187"/><text x="99.2622%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (20 samples, 0.09%)</title><rect x="99.7654%" y="261" width="0.0902%" height="15" fill="rgb(249,185,26)" fg:x="22118" fg:w="20"/><text x="100.0154%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (20 samples, 0.09%)</title><rect x="99.7654%" y="245" width="0.0902%" height="15" fill="rgb(249,174,33)" fg:x="22118" fg:w="20"/><text x="100.0154%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.01%)</title><rect x="99.8557%" y="277" width="0.0135%" height="15" fill="rgb(233,201,37)" fg:x="22138" fg:w="3"/><text x="100.1057%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.06%)</title><rect x="99.8692%" y="277" width="0.0631%" height="15" fill="rgb(221,78,26)" fg:x="22141" fg:w="14"/><text x="100.1192%" y="287.50"></text></g><g><title>all (22,170 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="22170"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (21,918 samples, 98.86%)</title><rect x="1.1367%" y="357" width="98.8633%" height="15" fill="rgb(230,49,44)" fg:x="252" fg:w="21918"/><text x="1.3867%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (21,918 samples, 98.86%)</title><rect x="1.1367%" y="341" width="98.8633%" height="15" fill="rgb(229,67,23)" fg:x="252" fg:w="21918"/><text x="1.3867%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>graphics`std::sys::pal::unix::thread::Thread::new::thread_start (21,918 samples, 98.86%)</title><rect x="1.1367%" y="325" width="98.8633%" height="15" fill="rgb(249,83,47)" fg:x="252" fg:w="21918"/><text x="1.3867%" y="335.50">graphics`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>graphics`core::ops::function::FnOnce::call_once{{vtable.shim}} (21,918 samples, 98.86%)</title><rect x="1.1367%" y="309" width="98.8633%" height="15" fill="rgb(215,43,3)" fg:x="252" fg:w="21918"/><text x="1.3867%" y="319.50">graphics`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>graphics`std::sys_common::backtrace::__rust_begin_short_backtrace (21,843 samples, 98.53%)</title><rect x="1.4750%" y="293" width="98.5250%" height="15" fill="rgb(238,154,13)" fg:x="327" fg:w="21843"/><text x="1.7250%" y="303.50">graphics`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.06%)</title><rect x="99.9369%" y="277" width="0.0631%" height="15" fill="rgb(219,56,2)" fg:x="22156" fg:w="14"/><text x="100.1869%" y="287.50"></text></g></svg></svg>